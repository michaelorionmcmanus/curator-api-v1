service: curator-v1


plugins:
  - serverless-plugin-cfauthorizer

provider:
  name: aws
  runtime: python2.7
  region: us-west-2
  stage: dev
  profile: ${{opt:profile}}
  variableSyntax: "\\${{([ :a-zA-Z0-9._,\\-\\/\\(\\)]+?)}}"
  environment: ${{file(./app/.env.yml)}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-west-2:*:*"
    - Effect: Allow
      Action:
        - iot:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - cognito-idp:*
      Resource:
        - '*'

custom:
  cfAuthorizers:
    CognitoAuthorizer:
      Type: "COGNITO_USER_POOLS"
      Name: "CognitoUserPoolAuthorizer"
      IdentitySource: "method.request.header.Authorization"
      ProviderARNs:
        - "arn:aws:cognito-idp:us-west-2:818443719598:userpool/us-west-2_1lUUc3IqG"

functions:
  AccountsController:
    handler: run.accounts_controller
    events:
      - http:
         path: accounts
         method: get
         cors: true
         integration: lambda-proxy
         cfAuthorizer: CognitoAuthorizer
      - http:
         path: accounts
         method: post
         cors: true
         integration: lambda-proxy
         cfAuthorizer: CognitoAuthorizer
  UsersController:
    handler: run.users_controller
    events:
      - http:
          path: users/{userId}
          method: patch
          cors: true
          integration: lambda-proxy
          cfAuthorizer: CognitoAuthorizer
  InstagramAccountsAuthorizationController:
    handler: run.instagram_accounts_authorization_controller
    events:
      - http:
          path: instagram-accounts/authorization
          method: get
          cors: true
          integration: lambda-proxy
          cfAuthorizer: CognitoAuthorizer
  InstagramAccountsController:
    handler: run.instagram_accounts_controller
    events:
      - http: 
          path: accounts/{accountId}/instagram-accounts
          method: get
          cors: true
          integration: lambda-proxy
          cfAuthorizer: CognitoAuthorizer
      - http: 
          path: accounts/{accountId}/instagram-accounts
          method: post
          cors: true
          integration: lambda-proxy
          cfAuthorizer: CognitoAuthorizer
  InstagramSubscriptionProcessor:
    handler: run.instagram_subscription_processor
    events:
      - http:
          path: system/subscriptions/instagram/process
          method: post
          integration: lambda-proxy
      - http:
          path: system/subscriptions/instagram/process
          method: get
          cors: true
          integration: lambda
          response:
            headers:
              Content-Type: "'text/plain'"
            template: $input.path('$')
            statusCodes:
              200:
                pattern: ''
                template:
                  text/plain: $input.path('$')
          request:
            template:
              application/json: '{ "httpMethod" : "$context.httpMethod", "queryStringParameters": {"hub_mode": "$input.params(''hub.mode'')","hub_verify_token": "$input.params(''hub.verify_token'')","hub_challenge": "$input.params(''hub.challenge'')"} }'
# you can add CloudFormation resource templates here
resources:
  Resources:
    AccountsTable: ${{file(./schemas/dynamo/accounts.yml)}}
    AccountsUsersTable: ${{file(./schemas/dynamo/accounts-users.yml)}}
    AccountCredentialsTable: ${{file(./schemas/dynamo/account-credentials.yml)}}
    IoTUserPolicy: 
      Type: "AWS::IoT::Policy"
      Properties: 
        PolicyName: ${{self:service}}-${{opt:stage, self:provider.stage}}-user-v2
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Action: 
                - "iot:Connect"
              Resource: 
                - "*"
            -
              Effect: "Allow"
              Action:
                - "iot:Receive"
              Resource:
                - "arn:aws:iot:us-west-2:818443719598:topic/global"
                - "arn:aws:iot:us-west-2:818443719598:topic/${cognito-identity.amazonaws.com:sub}"
            -
              Effect: "Allow"
              Action:
                - "iot:Subscribe"
              Resource:
                - "*"
  # Outputs:
  #   NewOutput:
  #     Description: "Description for the output"
  #     Value: "Some output value"
